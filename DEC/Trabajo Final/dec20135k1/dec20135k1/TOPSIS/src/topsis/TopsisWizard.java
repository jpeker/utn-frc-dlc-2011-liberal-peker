/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package topsis;

import java.awt.Desktop;
import java.awt.Dimension;
import java.io.File;
import java.io.IOException;
import java.text.NumberFormat;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import jxl.Sheet;
import jxl.Workbook;
import jxl.read.biff.BiffException;
import jxl.write.Label;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;

/**
 *
 * @author AndrésDarío
 */
public class TopsisWizard extends javax.swing.JFrame {
    private int actualTabFocus = 0; 
    private File file = null;
    private boolean opcionManualPrograma = false;
    private boolean opcionManualExcel = false;
    private boolean opcionImportarExcel = false;
    private DefaultTableModel modeloCriterio;
    private DefaultTableModel modeloAlt;
    private ArrayList <Criterio>listaCriterio;
    private ArrayList<Alternativa>listaAlternativa;
    private double pesoTotal;    
    private DefaultTableModel modeloMatriz;
    private DefaultTableModel modeloAltMatriz;
    private double matrizDatos [][];
    private DefaultTableModel modeloMatrizDatos;
    private DefaultTableModel modeloMatrizNormalizada;
    private DefaultTableModel modeloMatrizNormalizadaPonderada;
    private DefaultTableModel modeloIdeal;
    private DefaultTableModel modeloAntiIdeal;
    private DefaultTableModel modeloIndice;
    private DefaultTableModel modeloConclusion;
    
    /**
     * Creates new form TopsisWizard
     */
    public TopsisWizard() {
        
        initComponents();
        this.deshabiltarTodo();
        this.initCriterio();
        JLabel jLCargarDatos = new JLabel("Carga");
        jLCargarDatos.setPreferredSize(new Dimension(60,20));
        this.JTPWizard.setTabComponentAt(0, jLCargarDatos);
        //this.JTPWizard.getTabComponentAt(this.JTPWizard.getSelectedIndex()).update(null);
        /*
        for(int i = 0; i< this.JTPWizard.getTabCount(); i++){
            this.JTPWizard.setEnabledAt(i, false);
        }
        * */
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        BGTipoCarga = new javax.swing.ButtonGroup();
        BGCargaManual = new javax.swing.ButtonGroup();
        grupoBotonCriterio = new javax.swing.ButtonGroup();
        grupoBotonMostrar = new javax.swing.ButtonGroup();
        JTPWizard = new javax.swing.JTabbedPane();
        JPCrgarDatos = new javax.swing.JPanel();
        JBCargarDatosSiguiente = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        JTACargarDatosExplicacion = new javax.swing.JTextArea();
        JPTipoCarga = new javax.swing.JPanel();
        JRBRecuperarModelo = new javax.swing.JRadioButton();
        JRBManual = new javax.swing.JRadioButton();
        JPImportarExcel = new javax.swing.JPanel();
        JBAbrirExcel = new javax.swing.JButton();
        JLRutaAlArchivo = new javax.swing.JLabel();
        JLRutaElegida = new javax.swing.JLabel();
        JRBCrearPlantilla = new javax.swing.JRadioButton();
        JPPlantilla = new javax.swing.JPanel();
        JBPlantillaSiguiente = new javax.swing.JButton();
        JBPlantillaAnterior = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        JTACrearPlanillaExplicacion = new javax.swing.JTextArea();
        JPGeneradorPlantilla = new javax.swing.JPanel();
        JLCantidadCriterios = new javax.swing.JLabel();
        JTCantCriterios = new javax.swing.JTextField();
        JLCantidadAlternativas = new javax.swing.JLabel();
        JTCantAlternativas = new javax.swing.JTextField();
        JBGenerarPlantilla = new javax.swing.JButton();
        JCBPlantillaLlena = new javax.swing.JCheckBox();
        JPCriterios = new javax.swing.JPanel();
        JBCriteriosSiguiente = new javax.swing.JButton();
        JBCriteriosAnterior = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        txtNombreCriterio4 = new javax.swing.JTextField();
        txtPesoCriterio4 = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        rbtMax4 = new javax.swing.JRadioButton();
        rbtMin4 = new javax.swing.JRadioButton();
        btnAgregarCriterio4 = new javax.swing.JButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        tablaCriterio4 = new javax.swing.JTable();
        btnEliminarCriterio4 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        JTACrearPlanillaExplicacion1 = new javax.swing.JTextArea();
        JPAlternativas = new javax.swing.JPanel();
        JBAlternativasSiguiente = new javax.swing.JButton();
        JBAlternativasAnterior = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        txtAlternativa = new javax.swing.JTextField();
        btnAgregarAlternativa = new javax.swing.JButton();
        jScrollPane8 = new javax.swing.JScrollPane();
        tablaAlt = new javax.swing.JTable();
        btnEliminarAlternativa = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        JTACrearPlanillaExplicacion2 = new javax.swing.JTextArea();
        JPMatrizDecision = new javax.swing.JPanel();
        JBMatrizSiguiente = new javax.swing.JButton();
        JBMatrizAnterior = new javax.swing.JButton();
        jScrollPane9 = new javax.swing.JScrollPane();
        tablaAlt1 = new javax.swing.JTable();
        jScrollPane10 = new javax.swing.JScrollPane();
        tablaMatriz = new javax.swing.JTable();
        btnGuardar = new javax.swing.JButton();
        rbMostrarCalculos = new javax.swing.JRadioButton();
        rbResultadoFinal = new javax.swing.JRadioButton();
        cmbDistancia = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        JPProceso = new javax.swing.JPanel();
        JBProcesoSiguiente = new javax.swing.JButton();
        JBProcesoAnterior = new javax.swing.JButton();
        scrollProceso = new javax.swing.JScrollPane();
        panelProceso = new javax.swing.JPanel();
        jScrollPane11 = new javax.swing.JScrollPane();
        tablaMatrizDatos = new javax.swing.JTable();
        jScrollPane12 = new javax.swing.JScrollPane();
        tablaMatrizNormalizada = new javax.swing.JTable();
        jLabel17 = new javax.swing.JLabel();
        jScrollPane13 = new javax.swing.JScrollPane();
        tablaMatrizNormalizadaPonderada = new javax.swing.JTable();
        jScrollPane16 = new javax.swing.JScrollPane();
        tablaIndice = new javax.swing.JTable();
        jScrollPane14 = new javax.swing.JScrollPane();
        tablaIdeal = new javax.swing.JTable();
        jScrollPane15 = new javax.swing.JScrollPane();
        tablaAntiIdeal = new javax.swing.JTable();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        JPConclusion = new javax.swing.JPanel();
        JBConclusionFinalizar = new javax.swing.JButton();
        JBConclusionAnterior = new javax.swing.JButton();
        jScrollPane17 = new javax.swing.JScrollPane();
        tablaFinal = new javax.swing.JTable();
        JCBExportarResolucion = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("TOPSIS Solutions");

        JTPWizard.setFocusable(false);
        JTPWizard.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        JTPWizard.setName(""); // NOI18N
        JTPWizard.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                JTPWizardStateChanged(evt);
            }
        });

        JBCargarDatosSiguiente.setText("Siguiente");
        JBCargarDatosSiguiente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBCargarDatosSiguienteActionPerformed(evt);
            }
        });

        JTACargarDatosExplicacion.setEditable(false);
        JTACargarDatosExplicacion.setBackground(new java.awt.Color(180, 180, 180));
        JTACargarDatosExplicacion.setColumns(20);
        JTACargarDatosExplicacion.setRows(5);
        JTACargarDatosExplicacion.setText("Se requiere que se ingrese el tipo de  carga de datos que se van a \nusar para realizar los calculos mediante Topsis Solutions. Pueden \ncargarse manualmente desde el programa, mediante una planilla de\nExcel, o Si se tiene un archivo Excel con el formato correcto se \npuede importar el archivo.");
        jScrollPane1.setViewportView(JTACargarDatosExplicacion);

        JPTipoCarga.setBorder(javax.swing.BorderFactory.createTitledBorder("Tipo de Carga"));

        BGTipoCarga.add(JRBRecuperarModelo);
        JRBRecuperarModelo.setText("Recuperar Modelo");
        JRBRecuperarModelo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JRBRecuperarModeloActionPerformed(evt);
            }
        });

        BGTipoCarga.add(JRBManual);
        JRBManual.setText("Manual");
        JRBManual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JRBManualActionPerformed(evt);
            }
        });

        JPImportarExcel.setBorder(javax.swing.BorderFactory.createTitledBorder("Seleccionar Archivo"));
        JPImportarExcel.setEnabled(false);

        JBAbrirExcel.setText("Archivo");
        JBAbrirExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBAbrirExcelActionPerformed(evt);
            }
        });

        JLRutaAlArchivo.setText("Ruta: ");

        javax.swing.GroupLayout JPImportarExcelLayout = new javax.swing.GroupLayout(JPImportarExcel);
        JPImportarExcel.setLayout(JPImportarExcelLayout);
        JPImportarExcelLayout.setHorizontalGroup(
            JPImportarExcelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPImportarExcelLayout.createSequentialGroup()
                .addGroup(JPImportarExcelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(JBAbrirExcel)
                    .addGroup(JPImportarExcelLayout.createSequentialGroup()
                        .addComponent(JLRutaAlArchivo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JLRutaElegida, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        JPImportarExcelLayout.setVerticalGroup(
            JPImportarExcelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPImportarExcelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(JBAbrirExcel)
                .addGap(18, 18, 18)
                .addGroup(JPImportarExcelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(JLRutaAlArchivo)
                    .addComponent(JLRutaElegida))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        BGTipoCarga.add(JRBCrearPlantilla);
        JRBCrearPlantilla.setText("A Través de Plantilla");

        javax.swing.GroupLayout JPTipoCargaLayout = new javax.swing.GroupLayout(JPTipoCarga);
        JPTipoCarga.setLayout(JPTipoCargaLayout);
        JPTipoCargaLayout.setHorizontalGroup(
            JPTipoCargaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPTipoCargaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(JRBManual)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 79, Short.MAX_VALUE)
                .addComponent(JRBCrearPlantilla)
                .addGap(57, 57, 57)
                .addGroup(JPTipoCargaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(JPImportarExcel, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(JRBRecuperarModelo))
                .addContainerGap())
        );
        JPTipoCargaLayout.setVerticalGroup(
            JPTipoCargaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPTipoCargaLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(JPTipoCargaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(JRBRecuperarModelo)
                    .addComponent(JRBManual)
                    .addComponent(JRBCrearPlantilla))
                .addGap(18, 18, 18)
                .addComponent(JPImportarExcel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout JPCrgarDatosLayout = new javax.swing.GroupLayout(JPCrgarDatos);
        JPCrgarDatos.setLayout(JPCrgarDatosLayout);
        JPCrgarDatosLayout.setHorizontalGroup(
            JPCrgarDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPCrgarDatosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(JPCrgarDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(JPTipoCarga, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 510, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(JBCargarDatosSiguiente, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap(42, Short.MAX_VALUE))
        );
        JPCrgarDatosLayout.setVerticalGroup(
            JPCrgarDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, JPCrgarDatosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(JPTipoCarga, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 154, Short.MAX_VALUE)
                .addComponent(JBCargarDatosSiguiente)
                .addContainerGap())
        );

        JTPWizard.addTab("Cargar Datos", JPCrgarDatos);

        JBPlantillaSiguiente.setText("Siguiente");
        JBPlantillaSiguiente.setEnabled(false);
        JBPlantillaSiguiente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBPlantillaSiguienteActionPerformed(evt);
            }
        });

        JBPlantillaAnterior.setText("Anterior");
        JBPlantillaAnterior.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBPlantillaAnteriorActionPerformed(evt);
            }
        });

        JTACrearPlanillaExplicacion.setBackground(new java.awt.Color(180, 180, 180));
        JTACrearPlanillaExplicacion.setColumns(20);
        JTACrearPlanillaExplicacion.setEditable(false);
        JTACrearPlanillaExplicacion.setRows(5);
        JTACrearPlanillaExplicacion.setText("Usted ha elegido cargar los datos de resolucion de Topsis \nSolutions a través de la carga de una planilla de Microsoft\nExcel. Para continuar con el asistente seleccione la \ncantidad de criterios y alternativas que usted va a usar y \nTopsis Solutions le creará una plantilla para que usted \ncomplete con los datos necesarios.");
        jScrollPane2.setViewportView(JTACrearPlanillaExplicacion);

        JPGeneradorPlantilla.setBorder(javax.swing.BorderFactory.createTitledBorder("Generador de plantilla"));

        JLCantidadCriterios.setText("Cantidad De Criterios: ");

        JTCantCriterios.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JTCantCriteriosKeyReleased(evt);
            }
        });

        JLCantidadAlternativas.setText("Cantidad De Alternativas:");

        JTCantAlternativas.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JTCantAlternativasKeyReleased(evt);
            }
        });

        JBGenerarPlantilla.setText("Crear Plantilla");
        JBGenerarPlantilla.setEnabled(false);
        JBGenerarPlantilla.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBGenerarPlantillaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout JPGeneradorPlantillaLayout = new javax.swing.GroupLayout(JPGeneradorPlantilla);
        JPGeneradorPlantilla.setLayout(JPGeneradorPlantillaLayout);
        JPGeneradorPlantillaLayout.setHorizontalGroup(
            JPGeneradorPlantillaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPGeneradorPlantillaLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(JPGeneradorPlantillaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(JLCantidadCriterios)
                    .addComponent(JLCantidadAlternativas))
                .addGap(45, 45, 45)
                .addGroup(JPGeneradorPlantillaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(JTCantAlternativas)
                    .addComponent(JTCantCriterios, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(104, 104, 104)
                .addComponent(JBGenerarPlantilla)
                .addContainerGap(36, Short.MAX_VALUE))
        );
        JPGeneradorPlantillaLayout.setVerticalGroup(
            JPGeneradorPlantillaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPGeneradorPlantillaLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(JPGeneradorPlantillaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(JPGeneradorPlantillaLayout.createSequentialGroup()
                        .addGroup(JPGeneradorPlantillaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(JLCantidadCriterios)
                            .addComponent(JTCantCriterios, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(41, 41, 41)
                        .addComponent(JLCantidadAlternativas))
                    .addGroup(JPGeneradorPlantillaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(JTCantAlternativas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(JBGenerarPlantilla)))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        JCBPlantillaLlena.setText("Ya termine la carga de la plantilla");
        JCBPlantillaLlena.setEnabled(false);
        JCBPlantillaLlena.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                JCBPlantillaLlenaItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout JPPlantillaLayout = new javax.swing.GroupLayout(JPPlantilla);
        JPPlantilla.setLayout(JPPlantillaLayout);
        JPPlantillaLayout.setHorizontalGroup(
            JPPlantillaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPPlantillaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(JPPlantillaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(JCBPlantillaLlena)
                    .addGroup(JPPlantillaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(JPPlantillaLayout.createSequentialGroup()
                            .addComponent(JBPlantillaAnterior)
                            .addGap(18, 18, 18)
                            .addComponent(JBPlantillaSiguiente))
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(JPGeneradorPlantilla, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(42, Short.MAX_VALUE))
        );
        JPPlantillaLayout.setVerticalGroup(
            JPPlantillaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, JPPlantillaLayout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(JPGeneradorPlantilla, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(JCBPlantillaLlena)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 185, Short.MAX_VALUE)
                .addGroup(JPPlantillaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(JBPlantillaSiguiente)
                    .addComponent(JBPlantillaAnterior))
                .addContainerGap())
        );

        JTPWizard.addTab("Plantilla", JPPlantilla);

        JBCriteriosSiguiente.setText("Siguiente");
        JBCriteriosSiguiente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBCriteriosSiguienteActionPerformed(evt);
            }
        });

        JBCriteriosAnterior.setText("Anterior");
        JBCriteriosAnterior.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBCriteriosAnteriorActionPerformed(evt);
            }
        });

        jLabel13.setText("Nombre de Criterio");

        jLabel14.setText("Peso de Criterio");

        txtNombreCriterio4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtNombreCriterio4KeyReleased(evt);
            }
        });

        txtPesoCriterio4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPesoCriterio4KeyReleased(evt);
            }
        });

        jLabel15.setText("Tipo ");

        grupoBotonCriterio.add(rbtMax4);
        rbtMax4.setSelected(true);
        rbtMax4.setText("Maximizar");

        grupoBotonCriterio.add(rbtMin4);
        rbtMin4.setText("Minimizar");

        btnAgregarCriterio4.setText("Agregar");
        btnAgregarCriterio4.setEnabled(false);
        btnAgregarCriterio4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarCriterio4ActionPerformed(evt);
            }
        });

        tablaCriterio4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Criterio", "Peso", "Tipo"
            }
        ));
        jScrollPane7.setViewportView(tablaCriterio4);

        btnEliminarCriterio4.setText("Eliminar Criterio");
        btnEliminarCriterio4.setEnabled(false);
        btnEliminarCriterio4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarCriterio4ActionPerformed(evt);
            }
        });

        JTACrearPlanillaExplicacion1.setBackground(new java.awt.Color(180, 180, 180));
        JTACrearPlanillaExplicacion1.setColumns(20);
        JTACrearPlanillaExplicacion1.setEditable(false);
        JTACrearPlanillaExplicacion1.setRows(5);
        JTACrearPlanillaExplicacion1.setText("Usted ha elegido cargar los datos de resolucion de Topsis \nSolutions a través de la carga manual a traves del asistente. Para continuar con el asistente deberá \ningresar el nombre del criterio,selccionar el tipo y ingresar el peso(entre 0 y 1 ).\nSe recomienda ingresar mas de un criterio y un maximo de 7 criterios.");
        jScrollPane3.setViewportView(JTACrearPlanillaExplicacion1);

        javax.swing.GroupLayout JPCriteriosLayout = new javax.swing.GroupLayout(JPCriterios);
        JPCriterios.setLayout(JPCriteriosLayout);
        JPCriteriosLayout.setHorizontalGroup(
            JPCriteriosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPCriteriosLayout.createSequentialGroup()
                .addGroup(JPCriteriosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(JPCriteriosLayout.createSequentialGroup()
                        .addGroup(JPCriteriosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(JPCriteriosLayout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addGroup(JPCriteriosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(JPCriteriosLayout.createSequentialGroup()
                                        .addComponent(jLabel13)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtNombreCriterio4, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(JPCriteriosLayout.createSequentialGroup()
                                        .addGap(5, 5, 5)
                                        .addComponent(btnAgregarCriterio4)
                                        .addGap(30, 30, 30)
                                        .addComponent(btnEliminarCriterio4))
                                    .addGroup(JPCriteriosLayout.createSequentialGroup()
                                        .addGap(14, 14, 14)
                                        .addComponent(jLabel14)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtPesoCriterio4, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(JPCriteriosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(JPCriteriosLayout.createSequentialGroup()
                                        .addGap(68, 68, 68)
                                        .addComponent(jLabel15))
                                    .addGroup(JPCriteriosLayout.createSequentialGroup()
                                        .addGap(69, 69, 69)
                                        .addGroup(JPCriteriosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(JPCriteriosLayout.createSequentialGroup()
                                                .addComponent(JBCriteriosAnterior)
                                                .addGap(18, 18, 18)
                                                .addComponent(JBCriteriosSiguiente))
                                            .addGroup(JPCriteriosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(rbtMin4)
                                                .addComponent(rbtMax4))))))
                            .addGroup(JPCriteriosLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 51, Short.MAX_VALUE))
                    .addGroup(JPCriteriosLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 542, Short.MAX_VALUE)))
                .addContainerGap())
        );
        JPCriteriosLayout.setVerticalGroup(
            JPCriteriosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, JPCriteriosLayout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17)
                .addGroup(JPCriteriosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(JPCriteriosLayout.createSequentialGroup()
                        .addGroup(JPCriteriosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel13)
                            .addComponent(txtNombreCriterio4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(5, 5, 5)
                        .addGroup(JPCriteriosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel14)
                            .addComponent(txtPesoCriterio4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(JPCriteriosLayout.createSequentialGroup()
                        .addGroup(JPCriteriosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rbtMax4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rbtMin4)))
                .addGap(18, 18, 18)
                .addGroup(JPCriteriosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAgregarCriterio4)
                    .addComponent(btnEliminarCriterio4))
                .addGap(35, 35, 35)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 107, Short.MAX_VALUE)
                .addGroup(JPCriteriosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(JBCriteriosSiguiente)
                    .addComponent(JBCriteriosAnterior))
                .addContainerGap())
        );

        JTPWizard.addTab("Criterios", JPCriterios);

        JBAlternativasSiguiente.setText("Siguiente");
        JBAlternativasSiguiente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBAlternativasSiguienteActionPerformed(evt);
            }
        });

        JBAlternativasAnterior.setText("Anterior");
        JBAlternativasAnterior.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBAlternativasAnteriorActionPerformed(evt);
            }
        });

        jLabel16.setText("Nombre de Alternativa");

        txtAlternativa.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtAlternativaKeyReleased(evt);
            }
        });

        btnAgregarAlternativa.setText("Agregar");
        btnAgregarAlternativa.setEnabled(false);
        btnAgregarAlternativa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarAlternativaActionPerformed(evt);
            }
        });

        tablaAlt.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Alternativa"
            }
        ));
        jScrollPane8.setViewportView(tablaAlt);

        btnEliminarAlternativa.setText("EliminarAlternativa");
        btnEliminarAlternativa.setEnabled(false);
        btnEliminarAlternativa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarAlternativaActionPerformed(evt);
            }
        });

        JTACrearPlanillaExplicacion2.setBackground(new java.awt.Color(180, 180, 180));
        JTACrearPlanillaExplicacion2.setColumns(20);
        JTACrearPlanillaExplicacion2.setEditable(false);
        JTACrearPlanillaExplicacion2.setRows(5);
        JTACrearPlanillaExplicacion2.setText("Ahora deberá ingresar los nombres de las alternativas,\nse recomienda ingresar mas de una alternativas para \nuna evaluacion comparativa.");
        jScrollPane4.setViewportView(JTACrearPlanillaExplicacion2);

        javax.swing.GroupLayout JPAlternativasLayout = new javax.swing.GroupLayout(JPAlternativas);
        JPAlternativas.setLayout(JPAlternativasLayout);
        JPAlternativasLayout.setHorizontalGroup(
            JPAlternativasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPAlternativasLayout.createSequentialGroup()
                .addGroup(JPAlternativasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(JPAlternativasLayout.createSequentialGroup()
                        .addGroup(JPAlternativasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(JPAlternativasLayout.createSequentialGroup()
                                .addComponent(JBAlternativasAnterior)
                                .addGap(18, 18, 18)
                                .addComponent(JBAlternativasSiguiente))
                            .addGroup(JPAlternativasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(JPAlternativasLayout.createSequentialGroup()
                                    .addGap(18, 18, 18)
                                    .addComponent(jLabel16)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(txtAlternativa, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(48, 48, 48)
                                    .addComponent(btnAgregarAlternativa)
                                    .addGap(46, 46, 46)
                                    .addComponent(btnEliminarAlternativa))
                                .addGroup(JPAlternativasLayout.createSequentialGroup()
                                    .addGap(39, 39, 39)
                                    .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 408, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 43, Short.MAX_VALUE))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 552, Short.MAX_VALUE))
                .addContainerGap())
        );
        JPAlternativasLayout.setVerticalGroup(
            JPAlternativasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, JPAlternativasLayout.createSequentialGroup()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(JPAlternativasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(txtAlternativa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAgregarAlternativa)
                    .addComponent(btnEliminarAlternativa))
                .addGap(44, 44, 44)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 211, Short.MAX_VALUE)
                .addGroup(JPAlternativasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(JBAlternativasSiguiente)
                    .addComponent(JBAlternativasAnterior))
                .addContainerGap())
        );

        JTPWizard.addTab("Alternativas", JPAlternativas);

        JBMatrizSiguiente.setText("Siguiente");
        JBMatrizSiguiente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBMatrizSiguienteActionPerformed(evt);
            }
        });

        JBMatrizAnterior.setText("Anterior");
        JBMatrizAnterior.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBMatrizAnteriorActionPerformed(evt);
            }
        });

        tablaAlt1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane9.setViewportView(tablaAlt1);

        tablaMatriz.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane10.setViewportView(tablaMatriz);

        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        grupoBotonMostrar.add(rbMostrarCalculos);
        rbMostrarCalculos.setText("Mostrar Calculos ");

        grupoBotonMostrar.add(rbResultadoFinal);
        rbResultadoFinal.setText("Mostrarme Resultado Final");

        cmbDistancia.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Distancia Ciudad", "Distancia Euclídea" }));
        cmbDistancia.setSelectedIndex(1);

        jLabel1.setText("Distancia a la Solución");

        javax.swing.GroupLayout JPMatrizDecisionLayout = new javax.swing.GroupLayout(JPMatrizDecision);
        JPMatrizDecision.setLayout(JPMatrizDecisionLayout);
        JPMatrizDecisionLayout.setHorizontalGroup(
            JPMatrizDecisionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPMatrizDecisionLayout.createSequentialGroup()
                .addGroup(JPMatrizDecisionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(JPMatrizDecisionLayout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(JPMatrizDecisionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(JPMatrizDecisionLayout.createSequentialGroup()
                                .addComponent(JBMatrizAnterior)
                                .addGap(18, 18, 18)
                                .addComponent(JBMatrizSiguiente))
                            .addGroup(JPMatrizDecisionLayout.createSequentialGroup()
                                .addGroup(JPMatrizDecisionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnGuardar))
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 379, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, JPMatrizDecisionLayout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(cmbDistancia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(JPMatrizDecisionLayout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addGroup(JPMatrizDecisionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rbResultadoFinal)
                            .addComponent(rbMostrarCalculos))))
                .addContainerGap(41, Short.MAX_VALUE))
        );
        JPMatrizDecisionLayout.setVerticalGroup(
            JPMatrizDecisionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, JPMatrizDecisionLayout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addGroup(JPMatrizDecisionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addComponent(btnGuardar)
                .addGap(18, 18, 18)
                .addGroup(JPMatrizDecisionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbDistancia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(56, 56, 56)
                .addComponent(rbMostrarCalculos)
                .addGap(18, 18, 18)
                .addComponent(rbResultadoFinal)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 126, Short.MAX_VALUE)
                .addGroup(JPMatrizDecisionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(JBMatrizSiguiente)
                    .addComponent(JBMatrizAnterior))
                .addContainerGap())
        );

        JTPWizard.addTab("Matriz de Decisión", JPMatrizDecision);

        JBProcesoSiguiente.setText("Siguiente");
        JBProcesoSiguiente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBProcesoSiguienteActionPerformed(evt);
            }
        });

        JBProcesoAnterior.setText("Anterior");
        JBProcesoAnterior.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBProcesoAnteriorActionPerformed(evt);
            }
        });

        panelProceso.setBackground(new java.awt.Color(255, 255, 255));
        panelProceso.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        tablaMatrizDatos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane11.setViewportView(tablaMatrizDatos);

        tablaMatrizNormalizada.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane12.setViewportView(tablaMatrizNormalizada);

        jLabel17.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel17.setText("Matriz Normalizada");

        tablaMatrizNormalizadaPonderada.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane13.setViewportView(tablaMatrizNormalizadaPonderada);

        tablaIndice.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "C*"
            }
        ));
        jScrollPane16.setViewportView(tablaIndice);

        tablaIdeal.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane14.setViewportView(tablaIdeal);

        tablaAntiIdeal.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane15.setViewportView(tablaAntiIdeal);

        jLabel18.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel18.setText("Normalización de la Matriz");

        jLabel19.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel19.setText("Matriz Normalizada y Ponderada");

        jLabel20.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel20.setText("Cáculo de las distancias al Ideal");

        jLabel21.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel21.setText("Cáculo de las distancias al AntiIdeal");

        jLabel22.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel22.setForeground(new java.awt.Color(255, 0, 0));
        jLabel22.setText("Cáculo del Índice de Similaridad");

        javax.swing.GroupLayout panelProcesoLayout = new javax.swing.GroupLayout(panelProceso);
        panelProceso.setLayout(panelProcesoLayout);
        panelProcesoLayout.setHorizontalGroup(
            panelProcesoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelProcesoLayout.createSequentialGroup()
                .addGroup(panelProcesoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane16, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelProcesoLayout.createSequentialGroup()
                        .addGroup(panelProcesoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelProcesoLayout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addComponent(jLabel18))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelProcesoLayout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addGroup(panelProcesoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelProcesoLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(panelProcesoLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(panelProcesoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jScrollPane14, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jScrollPane12, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 375, Short.MAX_VALUE)
                            .addComponent(jScrollPane15, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jLabel17, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelProcesoLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 343, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(145, 145, 145))
        );
        panelProcesoLayout.setVerticalGroup(
            panelProcesoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelProcesoLayout.createSequentialGroup()
                .addComponent(jLabel18)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(jLabel17)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addComponent(jLabel19)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane14, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane15, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane16, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
        );

        scrollProceso.setViewportView(panelProceso);

        javax.swing.GroupLayout JPProcesoLayout = new javax.swing.GroupLayout(JPProceso);
        JPProceso.setLayout(JPProcesoLayout);
        JPProcesoLayout.setHorizontalGroup(
            JPProcesoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPProcesoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(JPProcesoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrollProceso, javax.swing.GroupLayout.DEFAULT_SIZE, 542, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, JPProcesoLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(JBProcesoAnterior)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(JBProcesoSiguiente)))
                .addContainerGap())
        );
        JPProcesoLayout.setVerticalGroup(
            JPProcesoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, JPProcesoLayout.createSequentialGroup()
                .addComponent(scrollProceso, javax.swing.GroupLayout.DEFAULT_SIZE, 480, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(JPProcesoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(JBProcesoSiguiente)
                    .addComponent(JBProcesoAnterior))
                .addContainerGap())
        );

        JTPWizard.addTab("Proceso", JPProceso);

        JBConclusionFinalizar.setText("Finalizar");
        JBConclusionFinalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBConclusionFinalizarActionPerformed(evt);
            }
        });

        JBConclusionAnterior.setText("Anterior");
        JBConclusionAnterior.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBConclusionAnteriorActionPerformed(evt);
            }
        });

        tablaFinal.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "C*"
            }
        ));
        jScrollPane17.setViewportView(tablaFinal);

        JCBExportarResolucion.setText("Exportar Modelo resuelto");

        javax.swing.GroupLayout JPConclusionLayout = new javax.swing.GroupLayout(JPConclusion);
        JPConclusion.setLayout(JPConclusionLayout);
        JPConclusionLayout.setHorizontalGroup(
            JPConclusionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPConclusionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(JPConclusionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, JPConclusionLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(JBConclusionAnterior)
                        .addGap(18, 18, 18)
                        .addComponent(JBConclusionFinalizar))
                    .addGroup(JPConclusionLayout.createSequentialGroup()
                        .addGroup(JPConclusionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane17, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(JCBExportarResolucion))
                        .addGap(0, 167, Short.MAX_VALUE)))
                .addContainerGap())
        );
        JPConclusionLayout.setVerticalGroup(
            JPConclusionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, JPConclusionLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane17, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44)
                .addComponent(JCBExportarResolucion)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 251, Short.MAX_VALUE)
                .addGroup(JPConclusionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(JBConclusionFinalizar)
                    .addComponent(JBConclusionAnterior))
                .addContainerGap())
        );

        JTPWizard.addTab("Conclusión", JPConclusion);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(JTPWizard, javax.swing.GroupLayout.PREFERRED_SIZE, 567, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(JTPWizard, javax.swing.GroupLayout.PREFERRED_SIZE, 560, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(38, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void JTPWizardStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_JTPWizardStateChanged
        JTabbedPane sourceTabbedPane = (JTabbedPane) evt.getSource();
        int index = sourceTabbedPane.getSelectedIndex();
        this.JTPWizard.setSelectedIndex(this.actualTabFocus);
    }//GEN-LAST:event_JTPWizardStateChanged

    private void JBCargarDatosSiguienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBCargarDatosSiguienteActionPerformed
        if(this.cargarDatosCumpleRequisitos()){
            this.moverAdelante();
        }
    }//GEN-LAST:event_JBCargarDatosSiguienteActionPerformed

    private void JBPlantillaAnteriorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBPlantillaAnteriorActionPerformed
        this.moverAtras();
    }//GEN-LAST:event_JBPlantillaAnteriorActionPerformed

    private void JBPlantillaSiguienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBPlantillaSiguienteActionPerformed
        try {
            Workbook workBook = Workbook.getWorkbook(new File("topsisTemplate.xls"));
            levantarPlanilla(workBook);
            this.actualTabFocus = this.actualTabFocus +2;
            this.moverAdelante();
            refrescarBotones();
            
        } catch (IOException ex) {
            Logger.getLogger(TopsisWizard.class.getName()).log(Level.SEVERE, null, ex);
        } catch (BiffException ex) {
            Logger.getLogger(TopsisWizard.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_JBPlantillaSiguienteActionPerformed

    private void JBCriteriosAnteriorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBCriteriosAnteriorActionPerformed
        this.actualTabFocus--;
        this.moverAtras();
    }//GEN-LAST:event_JBCriteriosAnteriorActionPerformed

    private void JBCriteriosSiguienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBCriteriosSiguienteActionPerformed
       this.moverAdelante();
    }//GEN-LAST:event_JBCriteriosSiguienteActionPerformed

    private void JBAlternativasAnteriorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBAlternativasAnteriorActionPerformed
        this.moverAtras();
    }//GEN-LAST:event_JBAlternativasAnteriorActionPerformed

    private void JBAlternativasSiguienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBAlternativasSiguienteActionPerformed
        this.moverAdelante();
       if(this.opcionManualPrograma){
            this.initMatrizDesicion();
       }
        
        
    }//GEN-LAST:event_JBAlternativasSiguienteActionPerformed

    private void JBMatrizAnteriorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBMatrizAnteriorActionPerformed
        this.moverAtras();
    }//GEN-LAST:event_JBMatrizAnteriorActionPerformed

    private void JBMatrizSiguienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBMatrizSiguienteActionPerformed
       
         if(this.rbResultadoFinal.isSelected()) //TATO HACER FUNCIONALIDAD QUE SALTE PESTAÑA
         {
             this.actualTabFocus ++;
         }
        
        this.moverAdelante();
        this.initProceso();
         
    }//GEN-LAST:event_JBMatrizSiguienteActionPerformed

    private void JBProcesoAnteriorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBProcesoAnteriorActionPerformed
        this.moverAtras();
    }//GEN-LAST:event_JBProcesoAnteriorActionPerformed

    private void JBProcesoSiguienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBProcesoSiguienteActionPerformed
        this.moverAdelante();       
    }//GEN-LAST:event_JBProcesoSiguienteActionPerformed

    private void JBConclusionAnteriorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBConclusionAnteriorActionPerformed
        this.moverAtras();
    }//GEN-LAST:event_JBConclusionAnteriorActionPerformed

    private void JBConclusionFinalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBConclusionFinalizarActionPerformed
        if(this.JCBExportarResolucion.isSelected()){
            exportar_excel exportar = new exportar_excel();
            exportar.exportarModelo(this.modeloMatrizDatos, this.modeloMatrizNormalizada, this.modeloMatrizNormalizadaPonderada,
                     this.modeloIdeal, this.modeloAntiIdeal, this.modeloConclusion);
        }
        int response = JOptionPane.showConfirmDialog(
                    this,
                    "Desea salir del programa?",
                    "Confirmacion",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.WARNING_MESSAGE);
            if (response == JOptionPane.YES_OPTION )
            {
                System.exit(0);
            }
        
    }//GEN-LAST:event_JBConclusionFinalizarActionPerformed

    private void JBAbrirExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBAbrirExcelActionPerformed
        file = new File("");
        JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
                "Archivos de Microsoft Excel", "xls");
        chooser.setFileFilter(filter);
        int returnVal = chooser.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            file = chooser.getSelectedFile();
            this.JLRutaElegida.setText(file.getPath());
        }
    }//GEN-LAST:event_JBAbrirExcelActionPerformed

    private void JRBManualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JRBManualActionPerformed
        this.monitorearCambioRadioButtons();
    }//GEN-LAST:event_JRBManualActionPerformed

    private void JRBRecuperarModeloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JRBRecuperarModeloActionPerformed
        this.monitorearCambioRadioButtons();
    }//GEN-LAST:event_JRBRecuperarModeloActionPerformed

    private void JTCantCriteriosKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_JTCantCriteriosKeyReleased
        this.JTCantCriterios.setText(this.limpiarTexto(this.JTCantCriterios.getText()));
        if(this.JTCantCriterios.getText().isEmpty() || this.JTCantAlternativas.getText().isEmpty()){
            this.JBGenerarPlantilla.setEnabled(false);
        }
        else{
            
            this.JBGenerarPlantilla.setEnabled(true);
        }
        
        
    }//GEN-LAST:event_JTCantCriteriosKeyReleased

    private void JBGenerarPlantillaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBGenerarPlantillaActionPerformed
        this.crearWorkBook();
        this.JCBPlantillaLlena.setEnabled(true);
    }//GEN-LAST:event_JBGenerarPlantillaActionPerformed

    private void txtNombreCriterio4KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNombreCriterio4KeyReleased
        this.refrescarBotones();
    }//GEN-LAST:event_txtNombreCriterio4KeyReleased

    private void txtPesoCriterio4KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPesoCriterio4KeyReleased
        this.refrescarBotones();
    }//GEN-LAST:event_txtPesoCriterio4KeyReleased

    private void btnEliminarCriterio4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarCriterio4ActionPerformed
        if (tablaCriterio4.getSelectedRow() > -1) {
            for (int i = 0; i < listaCriterio.size(); i++) {
                if (tablaCriterio4.getValueAt(tablaCriterio4.getSelectedRow(), 0).toString().compareTo(listaCriterio.get(i).getNombre()) == 0) {
                    pesoTotal -= listaCriterio.get(i).getPeso();
                    listaCriterio.remove(i);
                }
            }

            modeloCriterio.removeRow(tablaCriterio4.getSelectedRow());

        } else {
            JOptionPane.showMessageDialog(this, "Seleccione un criterio", "Error", JOptionPane.ERROR_MESSAGE);
        }

        this.refrescarBotones();
    }//GEN-LAST:event_btnEliminarCriterio4ActionPerformed

    private void txtAlternativaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAlternativaKeyReleased
        this.refrescarBotones();
    }//GEN-LAST:event_txtAlternativaKeyReleased
    private void agregarAlternativa(Alternativa alternativa){
        String[] datos = {alternativa.getNombre()};
        
        modeloAlt.addRow(datos);
        listaAlternativa.add(alternativa);
        this.txtAlternativa.setText(null);
        this.refrescarBotones();                
    }
    private void rellenarMatriz(){
        
    }
    private void btnAgregarAlternativaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarAlternativaActionPerformed

        Alternativa a = new Alternativa(txtAlternativa.getText());
        this.agregarAlternativa(a);
    }//GEN-LAST:event_btnAgregarAlternativaActionPerformed

    private void btnEliminarAlternativaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarAlternativaActionPerformed
        if (tablaAlt.getSelectedRow() > -1) {
            for (int i = 0; i < listaAlternativa.size(); i++) {
                if (tablaAlt.getValueAt(tablaAlt.getSelectedRow(), 0).toString().compareTo(listaAlternativa.get(i).getNombre()) == 0) {
                    listaAlternativa.remove(i);
                }
            }
            modeloAlt.removeRow(tablaAlt.getSelectedRow());
        } else {
            JOptionPane.showMessageDialog(this, "Seleccione una alternativa", "Error", JOptionPane.ERROR_MESSAGE);
        }
        this.refrescarBotones();
    }//GEN-LAST:event_btnEliminarAlternativaActionPerformed
    private void agregarCriterio(Criterio criterio){
        String tipo; 
        if(criterio.getTipo()==0) {
                        tipo="Minimizar";
                    }
                    else {
                        tipo="Maximizar";
                    }
        String [] datos ={criterio.getNombre(),Double.toString(criterio.getPeso()),tipo};
        modeloCriterio.addRow(datos);
        listaCriterio.add(criterio);
    }
    private void btnAgregarCriterio4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarCriterio4ActionPerformed
          
        try{
                Double peso=Double.parseDouble(this.txtPesoCriterio4.getText());
                pesoTotal+=peso;
                if(this.pesoTotal<=1)
                {  
                    Criterio c=new Criterio(this.txtNombreCriterio4.getText(),peso,getTipo());
                    agregarCriterio(c);
                }
                else {
                    JOptionPane.showMessageDialog(this, "La suma de los pesos debe ser 1", "Error", JOptionPane.ERROR_MESSAGE);
                    pesoTotal-=peso;
                }
        
            }
            catch(NumberFormatException e)
            {
            JOptionPane.showMessageDialog(this, "Datos mal cargados", "error", JOptionPane.ERROR_MESSAGE);
       
            System.out.println(e.getMessage());
            }
      
            this.txtNombreCriterio4.setText(null);
            this.txtPesoCriterio4.setText(null);
            this.rbtMax4.setSelected(true);
            this.refrescarBotones();
            
    }//GEN-LAST:event_btnAgregarCriterio4ActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
               
        try
        {
       for(int i=0 ; i < matrizDatos.length;i++) {
            for(int j=0 ; j < matrizDatos[i].length;j++)           
            {
                double valor=Double.parseDouble((String)modeloMatriz.getValueAt(i,j));
                if(listaCriterio.get(j).getTipo()==0)
                {if(valor!=0) {
                        valor= 1/valor;
                    }
                }
                
                    
//                double valor=Double.parseDouble((String)((Vector)modeloMatriz.getDataVector().elementAt(i)).elementAt(j));
                matrizDatos[i][j]=valor;
               
            }
        }
        this.rbMostrarCalculos.setEnabled(true);
        this.rbResultadoFinal.setEnabled(true);
        this.rbMostrarCalculos.setSelected(true);
        this.JBMatrizSiguiente.setEnabled(true);
        }
        catch(NumberFormatException | NullPointerException e)
        {
            JOptionPane.showMessageDialog(this, "Datos mal cargados", "error", JOptionPane.ERROR_MESSAGE);
       
            System.out.println(e.getMessage());
            
        }
       
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void JTCantAlternativasKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_JTCantAlternativasKeyReleased
        this.JTCantAlternativas.setText(this.limpiarTexto(this.JTCantAlternativas.getText()));   
        if(this.JTCantCriterios.getText().isEmpty() || this.JTCantAlternativas.getText().isEmpty()){
            this.JBGenerarPlantilla.setEnabled(false);
        }
           else{
               
               this.JBGenerarPlantilla.setEnabled(true);
           }
    }//GEN-LAST:event_JTCantAlternativasKeyReleased

    private void JCBPlantillaLlenaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_JCBPlantillaLlenaItemStateChanged
    if(this.JCBPlantillaLlena.isSelected()){
        this.JBPlantillaSiguiente.setEnabled(true);
    }
    else{
        this.JBPlantillaSiguiente.setEnabled(false);
    }
    
    }//GEN-LAST:event_JCBPlantillaLlenaItemStateChanged
   private void initProceso()
    {        
        tablaMatrizDatos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
            }
        ));
        tablaMatrizNormalizada.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
            }
        ));
        tablaMatrizNormalizadaPonderada.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
            }
        ));
        tablaIdeal.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
            }
        ));
        tablaAntiIdeal.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
            }
        ));
        int p=2;
        if(this.cmbDistancia.getSelectedIndex()==0) {
            p=1;
        }
        modeloMatrizDatos=(DefaultTableModel)tablaMatrizDatos.getModel();
        modeloMatrizNormalizada=(DefaultTableModel)tablaMatrizNormalizada.getModel();
        modeloMatrizNormalizadaPonderada=(DefaultTableModel)tablaMatrizNormalizadaPonderada.getModel();
        modeloIdeal=(DefaultTableModel)tablaIdeal.getModel();
        modeloAntiIdeal=(DefaultTableModel)tablaAntiIdeal.getModel();
        modeloIndice=(DefaultTableModel)tablaIndice.getModel();  
         modeloConclusion=(DefaultTableModel)tablaFinal.getModel();
        ManejadorCalculos man= new ManejadorCalculos();
        Resultado result= man.armarTabla(listaCriterio, listaAlternativa, matrizDatos, modeloMatrizDatos);
        modeloMatrizDatos=result.getModelo();
        result=man.armarTablaNormalizada(listaCriterio, listaAlternativa, matrizDatos, result.getMatriz(), modeloMatrizNormalizada);
        modeloMatrizNormalizada=result.getModelo();
        result=man.armarTablaNormalizadaPonderada(listaCriterio, listaAlternativa, result.getMatriz(), modeloMatrizNormalizadaPonderada);
        modeloMatrizNormalizadaPonderada=result.getModelo();
        double matrizNormPond[][]=result.getMatriz();
        result=man.calculoDistanciaIdeal(listaCriterio, listaAlternativa,matrizNormPond, modeloIdeal,p);
        modeloIdeal=result.getModelo();
        double matrizIdeal[][]=result.getMatriz();
        result=man.calculoDistanciaAntiIdeal(listaCriterio, listaAlternativa, matrizNormPond, modeloAntiIdeal,p);
        modeloAntiIdeal=result.getModelo();
        double matrizAntiIdeal[][]=result.getMatriz();
        result=man.calculoIndice(listaCriterio, listaAlternativa, matrizIdeal,result.getMatriz(), modeloIndice);
        modeloIndice=result.getModelo();        
        result=man.calculoIndice(listaCriterio, listaAlternativa, matrizIdeal,matrizAntiIdeal, modeloConclusion);
        modeloConclusion=result.getModelo();     
        
    }
   
   
    private void initMatrizDesicion()
    {
        this.rbMostrarCalculos.setEnabled(false);
        this.rbResultadoFinal.setEnabled(false);
        this.JBMatrizSiguiente.setEnabled(false);
        tablaMatriz.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
            }
        ));
        tablaAlt1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
            }
        ));        
        modeloMatriz=(DefaultTableModel)this.tablaMatriz.getModel();
        modeloAltMatriz=(DefaultTableModel)this.tablaAlt1.getModel();
        armarTabla();
        if(this.opcionManualPrograma){
            matrizDatos=new double[listaAlternativa.size()][listaCriterio.size()];
        }
        
        
    }
    private void initCriterio()
    {
        pesoTotal=0;
        modeloCriterio = (DefaultTableModel)this.tablaCriterio4.getModel();
        modeloAlt = (DefaultTableModel)this.tablaAlt.getModel();
       /* if(tablaCriterio4.getRowCount()!=0)
            this.btnEliminarCriterio4.setEnabled(true);
        
        if(tablaAlt.getRowCount()!=0)
            this.btnEliminarAlternativa.setEnabled(true);
        */
        listaCriterio=new ArrayList<>();
        listaAlternativa=new ArrayList<>();
        this.refrescarBotones();
        this.rbtMax4.setSelected(true);
    }
     private void armarTabla()
    {
        String [] datos=new String[listaAlternativa.size()];
        modeloAltMatriz.addColumn("Alternativas");
//         modeloMatriz.addColumn("");      
        if(this.opcionManualPrograma ==true){
             modeloMatriz.setRowCount(listaAlternativa.size());
             for(int i=0;i<listaAlternativa.size();i++)
                {
            Alternativa a=listaAlternativa.get(i);
//           datos[i]=a.getNombre();
            Object [] d={a.getNombre()};
            modeloAltMatriz.addRow(d);
                }
        }
       
        for(int i=0;i<listaCriterio.size();i++)
        {
            Criterio c=listaCriterio.get(i);
            modeloMatriz.addColumn(c.getNombre());
        }
        
        
//        modeloAlt.addRow(datos);
        tablaMatriz.getSelectionModel().setSelectionInterval(0, 0);
        
    }
    private int getTipo()
    {
        String aux="";
        int tipo=0;
        for (Enumeration e = this.grupoBotonCriterio.getElements(); e.hasMoreElements();) {
        JRadioButton b = (JRadioButton) e.nextElement();
        if (b.getModel() == grupoBotonCriterio.getSelection()) {
        aux= b.getText();
      }
        if(aux.compareTo("Maximizar")==0) {
                tipo=1;
            }
    }
        return tipo;
        
    }
    private void refrescarBotones()
    {
        if(!(this.txtPesoCriterio4.getText().isEmpty()) && !(this.txtNombreCriterio4.getText().isEmpty()))
        {
            this.btnAgregarCriterio4.setEnabled(true);
        }
        else
        {
            
            this.btnAgregarCriterio4.setEnabled(false);
        }
        if(this.modeloCriterio.getRowCount()>0){
            this.btnAgregarCriterio4.setEnabled(true);
        }
        
       
        if(tablaCriterio4.getRowCount()==0) {
            this.btnEliminarCriterio4.setEnabled(false);
        }
        else {
            this.btnEliminarCriterio4.setEnabled(true);
        }
        if(tablaCriterio4.getRowCount()>1) {
            this.JBCriteriosSiguiente.setEnabled(true);
        }
        else {
            this.JBCriteriosSiguiente.setEnabled(false);
        }
        
        if(!this.txtAlternativa.getText().isEmpty()) {
            this.btnAgregarAlternativa.setEnabled(true);
        }
        else {
            this.btnAgregarAlternativa.setEnabled(false);
        }
        
         if(tablaAlt.getRowCount()==0) {
            this.btnEliminarAlternativa.setEnabled(false);
        }
         else {
            this.btnEliminarAlternativa.setEnabled(true);
        }
        if(tablaAlt.getRowCount()>1) {
            this.JBAlternativasSiguiente.setEnabled(true);
        }
        else{
            this.JBAlternativasSiguiente.setEnabled(false);
        }
         
        // grupoBotonCriterio.clearSelection();
        // this.rbtMax4.setSelected(true);
         
    } 
    private void monitorearCambioRadioButtons(){
        if(this.JRBManual.isSelected()){
            this.JPImportarExcel.setEnabled(false);
            this.JBAbrirExcel.setEnabled(false);
            this.JRBCrearPlantilla.setEnabled(true);
        }
        else{
            this.JPImportarExcel.setEnabled(true);
            this.JBAbrirExcel.setEnabled(true);
            this.JRBCrearPlantilla.setEnabled(false);
        }
    }
        
        private void crearWorkBook(){
        try {
            int criterios = Integer.valueOf(this.JTCantCriterios.getText());
            int alternativas = Integer.valueOf(this.JTCantAlternativas.getText());
            WritableWorkbook workbook = Workbook.createWorkbook(new File("topsisTemplate.xls"));
            int tempCriterios = 0, tempAlternativas = 0;
            WritableSheet sheet = workbook.createSheet("Matriz", 0);
            Label emptyLabel = new Label(0, 0, " ");
            sheet.addCell(emptyLabel);
            for(int i =1; i < criterios +1; i++){
                tempCriterios++;
                Label lc = new Label(i, 0, "C"+ tempCriterios);
                sheet.addCell(lc);
            }
                
            for(int j = 1; j < alternativas +1; j++){
                        tempAlternativas++;
                        Label label = new Label(0, j, "A "+ tempAlternativas);
                        sheet.addCell(label);
                    }
            Label lp = new Label(0, alternativas+1, "Peso");
            Label lt = new Label(0, alternativas+2, "Tipo");
            sheet.addCell(lp);
            sheet.addCell(lt);
            workbook.write(); 
            workbook.close();
            Desktop.getDesktop().open(new File("D:\\Proyectos\\DEC2\\TOPSIS\\topsisTemplate.xls"));
            } catch (RowsExceededException ex) {
            Logger.getLogger(TopsisWizard.class.getName()).log(Level.SEVERE, null, ex);
        
        } catch (WriteException | IOException ex) {
            Logger.getLogger(TopsisWizard.class.getName()).log(Level.SEVERE, null, ex);
        }
        }
    private void moverAdelante(){
        //this.actualTabFocus = this.JTPWizard.getSelectedIndex() +1;
        this.JTPWizard.setSelectedIndex(++this.actualTabFocus);
    }
    
    private void moverAtras() {
        this.actualTabFocus = this.JTPWizard.getSelectedIndex() - 1;
        this.JTPWizard.setSelectedIndex(this.actualTabFocus);
    }
        private void deshabiltarTodo(){
        this.JBAbrirExcel.setEnabled(false);
        //this.JRBCrearPlantilla.setEnabled(false);
    }
    private void levantarPlanilla(Workbook file){
        
        importar_excel importarExcel = new importar_excel();
        List<Criterio> criterios = importarExcel.getCriterios(file);
        List<Alternativa> alternativas = importarExcel.getAlternativas(file);
        for(Criterio criterio: criterios){
            this.agregarCriterio(criterio);
        }
        listaAlternativa.clear();
        for(Alternativa a : alternativas){
            listaAlternativa.add(a);
        }
        listaCriterio.clear();
        for(Criterio c : criterios){
            listaCriterio.add(c);
        }
        
         //cargarMatrizAutomatica(criterios);
        //listaCriterio = (ArrayList)criterios;
        this.initMatrizDesicion();
        matrizDatos=new double[alternativas.size()][criterios.size()];
        cargarListaAltAutomatica(alternativas);
        for(Alternativa alternativa: alternativas){
            //this.agregarAlternativa(alternativa);
           
            
            this.cargarFilaAMatriz(alternativa);
        }
        
    }
    private void cargarListaAltAutomatica(List<Alternativa> alternativas){
        
        for(int i=0;i<alternativas.size();i++)
                {
            Alternativa a=alternativas.get(i);
//           datos[i]=a.getNombre();
            Object [] d={a.getNombre()};
            modeloAltMatriz.addRow(d);
                }
        if(this.opcionManualExcel){
            for(int i=0;i<alternativas.size();i++)
                {
            Alternativa a=alternativas.get(i);
//           datos[i]=a.getNombre();
            Object [] d={a.getNombre()};
            modeloAlt.addRow(d);
                }
        }
    }
    private void cargarMatrizAutomatica(List<Criterio>criterios){
        tablaMatriz.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
            }
        ));
        
         modeloMatriz=(DefaultTableModel)this.tablaMatriz.getModel();
          modeloMatriz.setRowCount(listaAlternativa.size());
        for(int i=0;i<criterios.size();i++)
        {
            Criterio c=criterios.get(i);
            modeloMatriz.addColumn(c.getNombre());
        }
         
    }
    
    private void cargarFilaAMatriz(Alternativa alternativa){
        String [] fila = new String[alternativa.getValores().size()];
        for(int i = 0; i< fila.length; i++){
            fila[i] = alternativa.getValores().get(i).toString();
        }
        
        this.modeloMatriz.addRow(fila);
        
    }
    /**
     * 
     * @param texto El texto a limpiar
     * @return El texto con valores numericos unicamente.
     */
    private String limpiarTexto(String texto){
        String textoLimpio = "";
        NumberFormat formatter = NumberFormat.getIntegerInstance();
        try {
            Number numero = formatter.parse(texto);
            int numeroInteger= numero.intValue();
            textoLimpio = String.valueOf(numeroInteger);
        } catch (ParseException ex) {
            //Logger.getLogger(TopsisWizard.class.getName()).log(Level.SEVERE, null, ex);
        }
        finally {
            return textoLimpio;
        }
    }
    private boolean cargarDatosCumpleRequisitos(){
        this.opcionManualPrograma = false;
        this.opcionImportarExcel = false;
        this.opcionManualExcel = false;
        if(this.JRBManual.isSelected() || this.JRBRecuperarModelo.isSelected() || this.JRBCrearPlantilla.isSelected()) {
            if (this.JRBManual.isSelected()) {
                    this.actualTabFocus = 1;
                    this.opcionManualPrograma = true;
                    return true;
            }
        if(this.JRBRecuperarModelo.isSelected()) {
            if (file != null){
                try {
                    this.actualTabFocus = 3;
                    this.opcionImportarExcel = true;
                    Workbook workBook = Workbook.getWorkbook(file);
                    levantarPlanilla(workBook);
                    return true;
                } catch (IOException ex) {
                    Logger.getLogger(TopsisWizard.class.getName()).log(Level.SEVERE, null, ex);
                } catch (BiffException ex) {
                    Logger.getLogger(TopsisWizard.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        if(this.JRBCrearPlantilla.isSelected()){
            this.opcionManualExcel = true;
            return true;
        }
        }
        return false;
        
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TopsisWizard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TopsisWizard().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup BGCargaManual;
    private javax.swing.ButtonGroup BGTipoCarga;
    private javax.swing.JButton JBAbrirExcel;
    private javax.swing.JButton JBAlternativasAnterior;
    private javax.swing.JButton JBAlternativasSiguiente;
    private javax.swing.JButton JBCargarDatosSiguiente;
    private javax.swing.JButton JBConclusionAnterior;
    private javax.swing.JButton JBConclusionFinalizar;
    private javax.swing.JButton JBCriteriosAnterior;
    private javax.swing.JButton JBCriteriosSiguiente;
    private javax.swing.JButton JBGenerarPlantilla;
    private javax.swing.JButton JBMatrizAnterior;
    private javax.swing.JButton JBMatrizSiguiente;
    private javax.swing.JButton JBPlantillaAnterior;
    private javax.swing.JButton JBPlantillaSiguiente;
    private javax.swing.JButton JBProcesoAnterior;
    private javax.swing.JButton JBProcesoSiguiente;
    private javax.swing.JCheckBox JCBExportarResolucion;
    private javax.swing.JCheckBox JCBPlantillaLlena;
    private javax.swing.JLabel JLCantidadAlternativas;
    private javax.swing.JLabel JLCantidadCriterios;
    private javax.swing.JLabel JLRutaAlArchivo;
    private javax.swing.JLabel JLRutaElegida;
    private javax.swing.JPanel JPAlternativas;
    private javax.swing.JPanel JPConclusion;
    private javax.swing.JPanel JPCrgarDatos;
    private javax.swing.JPanel JPCriterios;
    private javax.swing.JPanel JPGeneradorPlantilla;
    private javax.swing.JPanel JPImportarExcel;
    private javax.swing.JPanel JPMatrizDecision;
    private javax.swing.JPanel JPPlantilla;
    private javax.swing.JPanel JPProceso;
    private javax.swing.JPanel JPTipoCarga;
    private javax.swing.JRadioButton JRBCrearPlantilla;
    private javax.swing.JRadioButton JRBManual;
    private javax.swing.JRadioButton JRBRecuperarModelo;
    private javax.swing.JTextArea JTACargarDatosExplicacion;
    private javax.swing.JTextArea JTACrearPlanillaExplicacion;
    private javax.swing.JTextArea JTACrearPlanillaExplicacion1;
    private javax.swing.JTextArea JTACrearPlanillaExplicacion2;
    private javax.swing.JTextField JTCantAlternativas;
    private javax.swing.JTextField JTCantCriterios;
    private javax.swing.JTabbedPane JTPWizard;
    private javax.swing.JButton btnAgregarAlternativa;
    private javax.swing.JButton btnAgregarCriterio4;
    private javax.swing.JButton btnEliminarAlternativa;
    private javax.swing.JButton btnEliminarCriterio4;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JComboBox cmbDistancia;
    private javax.swing.ButtonGroup grupoBotonCriterio;
    private javax.swing.ButtonGroup grupoBotonMostrar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane15;
    private javax.swing.JScrollPane jScrollPane16;
    private javax.swing.JScrollPane jScrollPane17;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JPanel panelProceso;
    private javax.swing.JRadioButton rbMostrarCalculos;
    private javax.swing.JRadioButton rbResultadoFinal;
    private javax.swing.JRadioButton rbtMax4;
    private javax.swing.JRadioButton rbtMin4;
    private javax.swing.JScrollPane scrollProceso;
    private javax.swing.JTable tablaAlt;
    private javax.swing.JTable tablaAlt1;
    private javax.swing.JTable tablaAntiIdeal;
    private javax.swing.JTable tablaCriterio4;
    private javax.swing.JTable tablaFinal;
    private javax.swing.JTable tablaIdeal;
    private javax.swing.JTable tablaIndice;
    private javax.swing.JTable tablaMatriz;
    private javax.swing.JTable tablaMatrizDatos;
    private javax.swing.JTable tablaMatrizNormalizada;
    private javax.swing.JTable tablaMatrizNormalizadaPonderada;
    private javax.swing.JTextField txtAlternativa;
    private javax.swing.JTextField txtNombreCriterio4;
    private javax.swing.JTextField txtPesoCriterio4;
    // End of variables declaration//GEN-END:variables
}
